What should be done if the co-ordinator never confirms about the commit. 
How do i keep track of such a situation

Maintain a list of locks. []

Before changing anything append the key to this lock and after completing the task remove that. 



While statrting up the server, go check the log file. Check for all pending operations and roll them back

get_lock(item):
	if there is a existing lock:
		return false
	else:
		append item
		return lock

def wrte_to_sqlite(data, seq):
	genrate_sql to insert
	generte_sql_to_roll_back
	with lock wite_to_log_file (seq and roll back statment)
	method.save()

def commit():
	goback_back_to_log file search  for the entry of seq number and delete that entry from file


def put():
	if get_lock(key):
		write to the log file log file along with the sequence number
		write_key_to_sqlite()



Commands possible in a replica:
	
	general format
	---------------
	seq;cmd;key;value -- There always have to be 4 no matter what 

	Example Usage:
		get --    ;get;key
		put -- seq;get;key;value
		del -- seq;del;key;
	 commit -- seq;com;;
	 abort  -- seq;abrt;;



Fault revocry:
--------------
	There could be many possible solutions to this:
		I have decided to stick with, every one has to fillow the master. That is, if someone in the whole systems fails and recovers, will be brought to the same state as that of the master. Translating to, after the server process has come up and it is not in the same state as that of master, it will be made to look like master. 

		Possible disadvantage:
			If the database is too large, and replica is not in same state as that of master, it can be a time consuming to make the replica same as master. To over come this we could use checkpoints and start revovery from failed check points. But then implemeting checkpoints can be tricky. 

			In the present solution, i am continuing to use the 1st approach. 




